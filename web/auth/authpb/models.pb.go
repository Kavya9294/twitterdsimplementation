// Code generated by protoc-gen-go. DO NOT EDIT.
// source: models.proto

package mymem

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	Username             string   `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Followers            []string `protobuf:"bytes,3,rep,name=Followers,proto3" json:"Followers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetFollowers() []string {
	if m != nil {
		return m.Followers
	}
	return nil
}

type FollowUser struct {
	SourceUser           *CurrentUser `protobuf:"bytes,1,opt,name=SourceUser,proto3" json:"SourceUser,omitempty"`
	DestUser             *User        `protobuf:"bytes,2,opt,name=DestUser,proto3" json:"DestUser,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FollowUser) Reset()         { *m = FollowUser{} }
func (m *FollowUser) String() string { return proto.CompactTextString(m) }
func (*FollowUser) ProtoMessage()    {}
func (*FollowUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{1}
}

func (m *FollowUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FollowUser.Unmarshal(m, b)
}
func (m *FollowUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FollowUser.Marshal(b, m, deterministic)
}
func (m *FollowUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowUser.Merge(m, src)
}
func (m *FollowUser) XXX_Size() int {
	return xxx_messageInfo_FollowUser.Size(m)
}
func (m *FollowUser) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowUser.DiscardUnknown(m)
}

var xxx_messageInfo_FollowUser proto.InternalMessageInfo

func (m *FollowUser) GetSourceUser() *CurrentUser {
	if m != nil {
		return m.SourceUser
	}
	return nil
}

func (m *FollowUser) GetDestUser() *User {
	if m != nil {
		return m.DestUser
	}
	return nil
}

type CurrentUser struct {
	CurUser              *User    `protobuf:"bytes,1,opt,name=CurUser,proto3" json:"CurUser,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentUser) Reset()         { *m = CurrentUser{} }
func (m *CurrentUser) String() string { return proto.CompactTextString(m) }
func (*CurrentUser) ProtoMessage()    {}
func (*CurrentUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{2}
}

func (m *CurrentUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentUser.Unmarshal(m, b)
}
func (m *CurrentUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentUser.Marshal(b, m, deterministic)
}
func (m *CurrentUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentUser.Merge(m, src)
}
func (m *CurrentUser) XXX_Size() int {
	return xxx_messageInfo_CurrentUser.Size(m)
}
func (m *CurrentUser) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentUser.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentUser proto.InternalMessageInfo

func (m *CurrentUser) GetCurUser() *User {
	if m != nil {
		return m.CurUser
	}
	return nil
}

type Post struct {
	Username             string   `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Desc                 string   `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}
func (*Post) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{3}
}

func (m *Post) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Post.Unmarshal(m, b)
}
func (m *Post) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Post.Marshal(b, m, deterministic)
}
func (m *Post) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Post.Merge(m, src)
}
func (m *Post) XXX_Size() int {
	return xxx_messageInfo_Post.Size(m)
}
func (m *Post) XXX_DiscardUnknown() {
	xxx_messageInfo_Post.DiscardUnknown(m)
}

var xxx_messageInfo_Post proto.InternalMessageInfo

func (m *Post) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Post) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type Posts struct {
	PostsList            []*Post  `protobuf:"bytes,1,rep,name=postsList,proto3" json:"postsList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Posts) Reset()         { *m = Posts{} }
func (m *Posts) String() string { return proto.CompactTextString(m) }
func (*Posts) ProtoMessage()    {}
func (*Posts) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{4}
}

func (m *Posts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Posts.Unmarshal(m, b)
}
func (m *Posts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Posts.Marshal(b, m, deterministic)
}
func (m *Posts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Posts.Merge(m, src)
}
func (m *Posts) XXX_Size() int {
	return xxx_messageInfo_Posts.Size(m)
}
func (m *Posts) XXX_DiscardUnknown() {
	xxx_messageInfo_Posts.DiscardUnknown(m)
}

var xxx_messageInfo_Posts proto.InternalMessageInfo

func (m *Posts) GetPostsList() []*Post {
	if m != nil {
		return m.PostsList
	}
	return nil
}

type Users struct {
	UsersList            []*User  `protobuf:"bytes,1,rep,name=usersList,proto3" json:"usersList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Users) Reset()         { *m = Users{} }
func (m *Users) String() string { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()    {}
func (*Users) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{5}
}

func (m *Users) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Users.Unmarshal(m, b)
}
func (m *Users) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Users.Marshal(b, m, deterministic)
}
func (m *Users) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Users.Merge(m, src)
}
func (m *Users) XXX_Size() int {
	return xxx_messageInfo_Users.Size(m)
}
func (m *Users) XXX_DiscardUnknown() {
	xxx_messageInfo_Users.DiscardUnknown(m)
}

var xxx_messageInfo_Users proto.InternalMessageInfo

func (m *Users) GetUsersList() []*User {
	if m != nil {
		return m.UsersList
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "mymem.User")
	proto.RegisterType((*FollowUser)(nil), "mymem.FollowUser")
	proto.RegisterType((*CurrentUser)(nil), "mymem.CurrentUser")
	proto.RegisterType((*Post)(nil), "mymem.Post")
	proto.RegisterType((*Posts)(nil), "mymem.Posts")
	proto.RegisterType((*Users)(nil), "mymem.Users")
}

func init() { proto.RegisterFile("models.proto", fileDescriptor_0b5431a010549573) }

var fileDescriptor_0b5431a010549573 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcf, 0x6b, 0xea, 0x40,
	0x10, 0xf6, 0xb7, 0x66, 0x22, 0x3e, 0xde, 0x9e, 0x82, 0xbc, 0x83, 0x2c, 0xbc, 0xa7, 0xaf, 0x07,
	0x0f, 0xb1, 0xf4, 0x2e, 0x4a, 0xa5, 0xd0, 0x83, 0xc4, 0xf6, 0xd6, 0x8b, 0x4d, 0x06, 0x09, 0x6c,
	0x5c, 0xd9, 0xdd, 0x20, 0xfd, 0xcb, 0x7b, 0x2d, 0x3b, 0xd1, 0x64, 0xa5, 0x22, 0xf4, 0x94, 0x99,
	0xfd, 0xbe, 0x6f, 0x66, 0xbe, 0xd9, 0x0d, 0xf4, 0x33, 0x99, 0xa0, 0xd0, 0xd3, 0x83, 0x92, 0x46,
	0xb2, 0x76, 0xf6, 0x91, 0x61, 0xc6, 0xdf, 0xa0, 0xf5, 0xaa, 0x51, 0xb1, 0x21, 0xf4, 0xec, 0x77,
	0xbf, 0xcd, 0x30, 0xa8, 0x8f, 0xea, 0x13, 0x2f, 0x2a, 0x73, 0x8b, 0xad, 0xb7, 0x5a, 0x1f, 0xa5,
	0x4a, 0x82, 0x46, 0x81, 0x9d, 0x73, 0xf6, 0x07, 0xbc, 0x47, 0x29, 0x84, 0x3c, 0xa2, 0xd2, 0x41,
	0x73, 0xd4, 0x9c, 0x78, 0x51, 0x75, 0xc0, 0x53, 0x80, 0x22, 0xa1, 0x1e, 0x21, 0xc0, 0x46, 0xe6,
	0x2a, 0x46, 0x9b, 0x51, 0x17, 0x3f, 0x64, 0x53, 0x9a, 0x63, 0xba, 0xc8, 0x95, 0xc2, 0xbd, 0xb1,
	0x48, 0xe4, 0xb0, 0xd8, 0x18, 0x7a, 0x4b, 0xd4, 0x74, 0x4e, 0xbd, 0xfd, 0xd0, 0x3f, 0x29, 0x88,
	0x5a, 0x82, 0xfc, 0x1e, 0x7c, 0xa7, 0x06, 0xfb, 0x0b, 0xdd, 0x45, 0xae, 0x9c, 0x46, 0x17, 0xb2,
	0x33, 0xc6, 0x1f, 0xa0, 0xb5, 0x96, 0xda, 0xdc, 0xb4, 0xcf, 0xa0, 0xb5, 0x44, 0x1d, 0x9f, 0xac,
	0x53, 0xcc, 0x43, 0x68, 0x5b, 0x9d, 0x66, 0xff, 0xc1, 0x3b, 0xd8, 0xe0, 0x39, 0xd5, 0x26, 0xa8,
	0x8f, 0x9a, 0x4e, 0x27, 0x4b, 0x88, 0x2a, 0xd4, 0x6a, 0x6c, 0x4d, 0xd2, 0xe4, 0x36, 0xb8, 0xa2,
	0xa1, 0xe9, 0x2a, 0x34, 0xfc, 0x6c, 0x40, 0x67, 0x1e, 0xc7, 0xa8, 0xad, 0x0a, 0x9e, 0xf6, 0xa9,
	0x49, 0xb7, 0x22, 0xd5, 0xc8, 0x5c, 0xc1, 0xb0, 0xef, 0x24, 0x9a, 0xd7, 0xd8, 0x3f, 0xe8, 0xce,
	0x93, 0x84, 0xf6, 0x70, 0x93, 0x37, 0x86, 0xde, 0x0a, 0x4d, 0x61, 0xe4, 0x2a, 0x91, 0xa0, 0xb2,
	0x20, 0x6d, 0xca, 0x75, 0xf7, 0x8d, 0x37, 0x83, 0xc1, 0x06, 0x8d, 0x7b, 0x0f, 0x17, 0x65, 0xaf,
	0x5c, 0x36, 0x89, 0x7e, 0xbd, 0xc8, 0xdd, 0x4e, 0x60, 0xf9, 0x6e, 0xd8, 0xef, 0x13, 0xb1, 0x7a,
	0x3c, 0x43, 0xb7, 0x10, 0xaf, 0xb1, 0x3b, 0xf0, 0x57, 0x68, 0xe6, 0x42, 0x14, 0x2b, 0xbd, 0x69,
	0x73, 0x06, 0x83, 0xd5, 0x4f, 0xa7, 0x7a, 0xef, 0xd0, 0x6f, 0x32, 0xfb, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0x2a, 0xcc, 0xc5, 0x31, 0x36, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccessClient is the client API for Access service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessClient interface {
	Initialise(ctx context.Context, in *User, opts ...grpc.CallOption) (*Users, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Users, error)
	GetPosts(ctx context.Context, in *User, opts ...grpc.CallOption) (*Posts, error)
	AddPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Posts, error)
	SetCurrentUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*CurrentUser, error)
	ToggleFollowers(ctx context.Context, in *FollowUser, opts ...grpc.CallOption) (*User, error)
	GetAllUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (*Users, error)
	GetCurrentUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*CurrentUser, error)
}

type accessClient struct {
	cc *grpc.ClientConn
}

func NewAccessClient(cc *grpc.ClientConn) AccessClient {
	return &accessClient{cc}
}

func (c *accessClient) Initialise(ctx context.Context, in *User, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/mymem.Access/Initialise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/mymem.Access/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) GetPosts(ctx context.Context, in *User, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := c.cc.Invoke(ctx, "/mymem.Access/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) AddPost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := c.cc.Invoke(ctx, "/mymem.Access/AddPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) SetCurrentUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*CurrentUser, error) {
	out := new(CurrentUser)
	err := c.cc.Invoke(ctx, "/mymem.Access/SetCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) ToggleFollowers(ctx context.Context, in *FollowUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/mymem.Access/ToggleFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) GetAllUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/mymem.Access/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) GetCurrentUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*CurrentUser, error) {
	out := new(CurrentUser)
	err := c.cc.Invoke(ctx, "/mymem.Access/GetCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessServer is the server API for Access service.
type AccessServer interface {
	Initialise(context.Context, *User) (*Users, error)
	AddUser(context.Context, *User) (*Users, error)
	GetPosts(context.Context, *User) (*Posts, error)
	AddPost(context.Context, *Post) (*Posts, error)
	SetCurrentUser(context.Context, *User) (*CurrentUser, error)
	ToggleFollowers(context.Context, *FollowUser) (*User, error)
	GetAllUsers(context.Context, *User) (*Users, error)
	GetCurrentUser(context.Context, *User) (*CurrentUser, error)
}

func RegisterAccessServer(s *grpc.Server, srv AccessServer) {
	s.RegisterService(&_Access_serviceDesc, srv)
}

func _Access_Initialise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).Initialise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mymem.Access/Initialise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).Initialise(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mymem.Access/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mymem.Access/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).GetPosts(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_AddPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).AddPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mymem.Access/AddPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).AddPost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_SetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).SetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mymem.Access/SetCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).SetCurrentUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_ToggleFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).ToggleFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mymem.Access/ToggleFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).ToggleFollowers(ctx, req.(*FollowUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mymem.Access/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).GetAllUsers(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mymem.Access/GetCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).GetCurrentUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _Access_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mymem.Access",
	HandlerType: (*AccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialise",
			Handler:    _Access_Initialise_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Access_AddUser_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _Access_GetPosts_Handler,
		},
		{
			MethodName: "AddPost",
			Handler:    _Access_AddPost_Handler,
		},
		{
			MethodName: "SetCurrentUser",
			Handler:    _Access_SetCurrentUser_Handler,
		},
		{
			MethodName: "ToggleFollowers",
			Handler:    _Access_ToggleFollowers_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _Access_GetAllUsers_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _Access_GetCurrentUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "models.proto",
}
